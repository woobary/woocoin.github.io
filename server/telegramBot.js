const dotenv = require('dotenv');
dotenv.config();

const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const User = require('./models/User');
const translations = require('./translations');

mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
function translate(user, key, params = {}) {
  const lang = user.language || 'ru';
  let message = translations[lang][key] || '';

  for (const [paramKey, paramValue] of Object.entries(params)) {
    message = message.replace(`{${paramKey}}`, paramValue);
  }
  return message;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';

  try {
    let user = await User.findOne({ telegramId: chatId });

    if (!user) {
      user = new User({
        telegramId: chatId,
        username: username,
        wooCoin: 10000,  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
        baryCoin: 50,    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
        energy: 2000,
        level: 1,
        referralCount: 0,
        lastLogin: new Date(),
        language: 'ru',  // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä—É—Å—Å–∫–∏–π
        lastDailyReward: null  // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
      });

      await user.save();
      bot.sendMessage(chatId, translate(user, 'welcome', { username }));
    } else {
      bot.sendMessage(chatId, translate(user, 'welcome_back', { username }));
    }

    showMenu(chatId, user);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /setlanguage –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
bot.onText(/\/setlanguage/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–†—É—Å—Å–∫–∏–π', callback_data: 'setlang_ru' },
          { text: 'English', callback_data: 'setlang_en' }
        ]
      ]
    }
  };

  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:', options);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data.startsWith('setlang_')) {
    const lang = data.split('_')[1];
    try {
      const user = await User.findOne({ telegramId: chatId });
      if (user) {
        user.language = lang;
        await user.save();
        bot.sendMessage(chatId, translate(user, 'language_changed'));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞:', error);
    }
  } else if (data === 'daily') {
    handleDailyReward(chatId);
  } else if (data === 'stats') {
    showStats(chatId);
  } else if (data === 'help') {
    showHelp(chatId);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
function showMenu(chatId, user) {
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: translate(user, 'daily'), callback_data: 'daily' },
          { text: translate(user, 'stats'), callback_data: 'stats' }
        ],
        [
          { text: translate(user, 'help'), callback_data: 'help' }
        ]
      ]
    }
  };

  bot.sendMessage(chatId, translate(user, 'menu_prompt'), options);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
async function handleDailyReward(chatId) {
  try {
    const user = await User.findOne({ telegramId: chatId });
    if (user) {
      const now = new Date();
      const lastClaim = user.lastDailyReward ? new Date(user.lastDailyReward) : null;

      if (!lastClaim || now - lastClaim >= 24 * 60 * 60 * 1000) {
        user.wooCoin += 5000; // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
        user.lastDailyReward = now;
        await user.save();
        bot.sendMessage(chatId, translate(user, 'daily_reward_claimed', { amount: 5000 }));
      } else {
        bot.sendMessage(chatId, translate(user, 'daily_reward_already_claimed'));
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showStats(chatId) {
  try {
    const user = await User.findOne({ telegramId: chatId });
    if (user) {
      const statsMessage = `
        üë§ –ò–º—è: ${user.username}
        üèÜ –£—Ä–æ–≤–µ–Ω—å: ${user.level}
        üí∞ WooCoin: ${user.wooCoin}
        üí∏ BaryCoin: ${user.baryCoin}
      `;
      bot.sendMessage(chatId, statsMessage);
    } else {
      bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ (–ø–æ–º–æ—â–∏)
function showHelp(chatId) {
  const helpMessage = `
    üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
    /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    /setlanguage - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
    /menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
  `;
  bot.sendMessage(chatId, helpMessage);
}

module.exports = bot;
